'use strict';

/**
 * Created at 16/7/8.
 * @Author Ling.
 * @Email i@zeroling.com
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.collect = collect;
exports.upload = upload;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _gracefulFs = require('graceful-fs');

var _gracefulFs2 = _interopRequireDefault(_gracefulFs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _babylon = require('babylon');

var _utils = require('./utils');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = (0, _debug2.default)('ice:collect');

/**
 * 分析数据
 */

//import readdir from 'fs-readdir-recursive';
function collect(options) {

    options = options || {};
    var rootDir = void 0;

    if (Object.prototype.toString.call(options) == '[object String]') {
        rootDir = options;
        options = {};
    }

    rootDir = rootDir || options.rootDir;

    if (!rootDir) {
        console.error('缺少项目路径，请添加 rootDir 参数');
        return;
    }

    options.rootDir = rootDir;
    options.basicPackage = options.basicPackage || '@ali/ice';

    // 使用 assets 目录下的 package.json 文件来判断为 java 项目是否可行？
    var isJava = _gracefulFs2.default.existsSync(_path2.default.join(rootDir, 'assets/package.json'));
    var rootPath = rootDir;
    if (isJava) {
        rootPath = _path2.default.join(rootDir, 'assets');
    }

    // 获取基础信息
    var pkg = {};
    try {
        var packageFilePath = _path2.default.join(rootPath, 'package.json');
        pkg = JSON.parse(_gracefulFs2.default.readFileSync(packageFilePath, 'utf-8'));
    } catch (err) {
        debug('读取 package.json 文件错误: ', err.message);
    }

    var abc = {};
    try {
        var abcFilePath = _path2.default.join(rootPath, 'abc.json');
        abc = JSON.parse(_gracefulFs2.default.readFileSync(abcFilePath, 'utf-8'));
    } catch (err) {
        // fie 没有这个文件，不报错
    }

    var gitConfig = (0, _utils.getGitConfig)(rootDir);
    var modules = (0, _utils.getDepsInfo)(rootPath, pkg);

    debug('git config', gitConfig);
    debug('项目依赖信息', modules);

    var analyzeFiles = _glob2.default.sync('**/*.js?(x)', {
        cwd: rootPath,
        ignore: ['**/node_modules/**', 'build/**', 'assets/build/**']
    });

    debug('目标文件：', analyzeFiles);

    var analyzed = analyzeFiles.reduce(function (obj, current) {
        obj[current] = analyze(_path2.default.join(rootPath, current));
        return obj;
    }, {});

    debug('依赖分析：', analyzed);

    var repoName = void 0;
    if (process.env.BUILD_GIT_GROUP && process.env.BUILD_GIT_PROJECT) {
        repoName = process.env.BUILD_GIT_GROUP + '/' + process.env.BUILD_GIT_PROJECT;
    }

    var result = {
        description: options.description || '',
        pkg: pkg, // package.json 信息
        abc: abc, // abc.json 信息
        modules: modules, // 模块依赖信息
        analyzed: analyzed, // 依赖信息分析
        userInfo: process.env.BUILD_USER || gitConfig.userName, // 云构建读取出来的可能是 工号 也可能是 花名，云构建读取数据的优先级高于 git config
        repoName: repoName || gitConfig.repoName, // 项目组名和仓库名
        statistics: getStatistics(analyzed, options.basicPackage), //主体包信息统计
        kit: options.kit, // BU名称
        basicPackage: options.basicPackage, // 主体包名称
        basicPackageVersion: (pkg['dependencies'] || {})[options.basicPackage] };

    debug('上报数据', result);

    return result;
}

/**
 * 分析并上报数据
 */
function upload(options) {
    var env = process.env.NODE_ENV || 'prod';
    var envToHost = {
        local: 'local.ice.taobao.net:6001',
        daily: 'ice.taobao.net',
        prod: 'ice.alibaba-inc.com'
    };

    return new _promise2.default(function (resolve, reject) {
        var info = collect(options);
        var url = 'http://' + envToHost[env] + '/service/collect?appId=def-ice-app';

        debug('上报数据', url);

        _superagent2.default.post(url).send(info).end(function (err, res) {
            res = res || {};
            var body = res.body || {};

            if (err || body.status !== 'success') {
                debug('上报数据出错：', err || new Error(body.message));
                return reject(err);
            }

            debug('上报数据完成', body);
            return resolve(res);
        });
    });
}

/**
 * 分析文件依赖
 */
function analyze(file) {
    var source = _gracefulFs2.default.readFileSync(file, 'utf-8');
    var ast = (0, _babylon.parse)(source, {
        sourceType: "module",
        plugins: ["jsx", "flow", "asyncFunctions", "classConstructorCall", "doExpressions", "trailingFunctionCommas", "objectRestSpread", "decorators", "classProperties", "exportExtensions", "exponentiationOperator", "asyncGenerators", "functionBind", "functionSent"]
    });
    // got ast
    return (0, _utils.getImportedOrRequiredModules)(ast);
}

/**
 * 根据依赖信息做进一步计算统计
 */
function getStatistics(analyzed, basicPackage) {
    var basicComponentsTimes = {}; // 基础组件引用次数
    var businessComponentsTimes = {}; // 业务组件引用次数
    var thirdModulesTimes = {}; // 第三方模块引用次数

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = (0, _getIterator3.default)((0, _values2.default)(analyzed)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var arr = _step.value;

            arr.forEach(function (imported) {
                if (imported.fromModule === basicPackage) {
                    // 基础组件
                    if (Array.isArray(imported.importedValue)) {
                        imported.importedValue.forEach(function (moduleName) {
                            basicComponentsTimes[moduleName] = basicComponentsTimes[moduleName] === undefined ? 1 : basicComponentsTimes[moduleName] + 1;
                        });
                    } else {
                        basicComponentsTimes[imported.importedValue] = basicComponentsTimes[imported.importedValue] === undefined ? 1 : basicComponentsTimes[imported.importedValue] + 1;
                    }
                } else if (imported.fromModule.match(/^@ali\/ice\-/)) {
                    // 业务组件
                    businessComponentsTimes[imported.fromModule] = businessComponentsTimes[imported.fromModule] === undefined ? 1 : businessComponentsTimes[imported.fromModule] + 1;
                } else {
                    // 第三方模块
                    thirdModulesTimes[imported.fromModule] = thirdModulesTimes[imported.fromModule] === undefined ? 1 : thirdModulesTimes[imported.fromModule] + 1;
                }
            });
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return {
        basicComponents: (0, _keys2.default)(basicComponentsTimes),
        businessComponents: (0, _keys2.default)(businessComponentsTimes),
        thirdModules: (0, _keys2.default)(thirdModulesTimes),
        basicComponentsTimes: basicComponentsTimes,
        businessComponentsTimes: businessComponentsTimes,
        thirdModulesTimes: thirdModulesTimes
    };
}